{"version":3,"sources":["Spinner/Spinner.js","ShowList/ShowList.js","ShowPreview/ShowPreview.js","App.js","serviceWorker.js","index.js"],"names":["Spinner","className","ShowList","state","shows","setTitleFilter","bind","axios","get","then","res","data","map","show","id","name","desc","summary","replace","substring","img","image","medium","setState","showsToDisplay","this","length","key","src","alt","to","ev","filter","toLowerCase","startsWith","target","value","type","placeholder","onKeyUp","displayShows","React","Component","ShowPreview","props","selectedShow","displayShowPreview","displayGenres","match","params","style","backgroundImage","original","genres","genre","i","date","Date","premiered","width","rating","average","moment","format","href","externals","imdb","displayHeader","displayMainInfo","showPreview","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3cef97ac.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Spinner.css';\r\n\r\nconst Spinner = () => <div className=\"lds-default\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\r\n\r\nexport default Spinner;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './ShowList.css';\r\nimport Spinner from '../Spinner/Spinner';\r\n\r\nexport class ShowList extends React.Component {\r\n  constructor() {\r\n      super()\r\n\r\n      this.state= {\r\n        shows: []\r\n      }\r\n\r\n      this.setTitleFilter = this.setTitleFilter.bind(this)\r\n  }\r\n\r\ncomponentDidMount() {\r\n    axios.get('http://api.tvmaze.com/shows').then(res => {\r\n      let shows = res.data.map(show => {\r\n        return {\r\n          id: show.id,\r\n          name: show.name,\r\n          desc: show.summary.replace(/(<([^>]+)>)/ig, '').substring(0, 100) + '...',\r\n          img: show.image.medium\r\n        }\r\n      })\r\n\r\n\r\n      this.setState({shows, showsToDisplay: shows})\r\n    })\r\n}\r\n\r\ndisplayShows() {\r\n  if (this.state.showsToDisplay === 0) {\r\n    return <div className='loader'>No match</div>\r\n  } else if (this.state.shows.length > 0) {\r\n      return this.state.showsToDisplay.map((show, key)=> (\r\n      <div className=\"card\" key={key}>\r\n          <img src={show.img} className=\"card-img-top\" alt=\"Show poster\"></img>\r\n          <div className=\"card-body\">\r\n            <h5 className=\"card-title\">{show.name}</h5>\r\n            <p className=\"card-text\">{show.desc}</p>\r\n            <Link className=\"btn btn-list\" to={`show/${show.id}`}>Read More</Link>\r\n          </div>\r\n        </div>\r\n      ))\r\n    } else {\r\n      return (\r\n        <div className='loader'>\r\n          <Spinner></Spinner>\r\n        </div>\r\n      )}\r\n}\r\n\r\nsetTitleFilter(ev) {\r\n  const {shows} = this.state;\r\n\r\n  let showsToDisplay = shows.filter(show => {\r\n    return show.name.toLowerCase().startsWith(ev.target.value.toLowerCase())\r\n  })\r\n\r\n  this.setState({showsToDisplay})\r\n}\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className='show-search'>\r\n          <h1>Find your favourite show</h1>\r\n          <input type='text' placeholder='Type the title here' onKeyUp={this.setTitleFilter}></input>\r\n        </div>\r\n        <section className='show-list'>\r\n          {this.displayShows()}\r\n        </section>\r\n      </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default ShowList;\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './ShowPreview.css';\r\nimport axios from 'axios';\r\nimport Spinner from '../Spinner/Spinner';\r\nimport moment from 'moment';\r\n\r\nexport class ShowPreview extends React.Component {\r\n    constructor(props) {\r\n      super(props)\r\n  \r\n      this.state = {\r\n        selectedShow: null\r\n      }\r\n\r\n      this.displayShowPreview = this.displayShowPreview.bind(this);\r\n      this.displayGenres = this.displayGenres.bind(this);\r\n    }\r\n  \r\n    componentDidMount() {\r\n      axios.get(`http://api.tvmaze.com/shows/${this.props.match.params.id}`).then((show) => {\r\n        this.setState({selectedShow: show.data})\r\n      })\r\n  \r\n    }\r\n  \r\n    displayHeader(selectedShow) {\r\n      return (\r\n        <header className='showHeader' style={{backgroundImage: \"url('\" + selectedShow.image.original + \"')\"}}></header>\r\n        )\r\n    }\r\n\r\n    displayGenres() {\r\n      let genresList = [];\r\n\r\n      genresList = this.state.selectedShow.genres.map((genre, i) => {\r\n        if (i < this.state.selectedShow.genres.length - 1) {\r\n          return genre + ', ';\r\n        } else {\r\n          return genre;\r\n        }\r\n      })\r\n\r\n      return genresList;\r\n    }\r\n\r\n    displayMainInfo(selectedShow) {\r\n      let date = new Date(selectedShow.premiered);\r\n\r\n      return (\r\n        <main className='show-desc'> \r\n          <h1>{selectedShow.name}</h1>\r\n          <div className='coolness-meter'>\r\n            <div style={{width: selectedShow.rating.average * 10 + '%' }}>\r\n            {selectedShow.rating.average * 10}%\r\n            </div>\r\n          </div>\r\n          <h2>Premiere date: {moment(date).format(\"DD MMM YYYY\")}</h2>\r\n          <h2>Genres: {this.displayGenres()}</h2>\r\n          <p className='show-summary-long'>{selectedShow.summary.replace(/(<([^>]+)>)/ig, '')}</p>\r\n          <a className='btn' target='_blank' href={`https://www.imdb.com/title/${selectedShow.externals.imdb}`}>Read more on IMDB</a>\r\n        </main>\r\n      )\r\n    }\r\n\r\n    displayShowPreview() {\r\n        const {selectedShow} = this.state;\r\n\r\n        return (\r\n            <section className='show-preview'>\r\n                {this.displayHeader(selectedShow)}\r\n                {this.displayMainInfo(selectedShow)}\r\n            </section>\r\n        )\r\n    }\r\n\r\n    render() {\r\n      let showPreview;\r\n  \r\n      if (this.state.selectedShow) {\r\n        showPreview = this.displayShowPreview();\r\n      } else {\r\n        showPreview = (\r\n            <div className='loader'>\r\n                <Spinner></Spinner>\r\n            </div>\r\n        )\r\n      }\r\n  \r\n      return  (\r\n        <div className=\"shows-list\">\r\n          <Link to=\"/\"><button className='btn'>Back</button></Link>\r\n          <h1>{showPreview}</h1>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default ShowPreview;\r\n  ","import React from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport ShowList from './ShowList/ShowList';\nimport ShowPreview from './ShowPreview/ShowPreview';\n\nfunction App() {\n  return (\n    <Router>\n      <div className='container'>\n        <Route exact path=\"/\" component={ShowList}></Route>\n        <Route path=\"/show/:id\" component={ShowPreview}></Route>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}